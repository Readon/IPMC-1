/* Standard includes. */
#include "stdlib.h"
#include "string.h"

/* lwIP core includes */
#include "lwip/opt.h"
#include "lwip/sockets.h"

/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"

/* Utils includes. */
#include <FreeRTOS_CLI/FreeRTOS_CLI.h>

#include "CLI_server.h"

/*-----------------------------------------------------------*/

void CLI_Interpreter_Task(void *pvParameters) {
	long lSocket, lClientFd, lBytes, lAddrLen = sizeof(struct sockaddr_in), lInputIndex;
	struct sockaddr_in sLocalAddr;
	struct sockaddr_in client_addr;
	const char *pcWelcomeMessage = "CLI server - connection accepted.\r\n "
			"Type Help to view a list of registered commands.\r\n\r\n>";
	char cInChar;
	static char cInputString[cmdMAX_INPUT_SIZE], cOutputString[cmdMAX_OUTPUT_SIZE];
	portBASE_TYPE xReturned;
	extern void vRegisterSampleCLICommands(void);

	(void) pvParameters;

	/* Register the CLI commands. */
	vRegisterCLICommands();

	lSocket = socket(AF_INET, SOCK_STREAM, 0);

	if (lSocket >= 0) {
		memset((char *) &sLocalAddr, 0, sizeof(sLocalAddr));
		sLocalAddr.sin_family = AF_INET;
		sLocalAddr.sin_len = sizeof(sLocalAddr);
		sLocalAddr.sin_addr.s_addr = htonl(INADDR_ANY);
		sLocalAddr.sin_port = ntohs(((unsigned short ) 23));

		if (bind(lSocket, (struct sockaddr *) &sLocalAddr, sizeof(sLocalAddr)) < 0) {
			close(lSocket);
			vTaskDelete( NULL);
		}

		if (listen(lSocket, 20) != 0) {
			close(lSocket);
			vTaskDelete( NULL);
		}

		for (;;) {

			lClientFd = accept(lSocket, (struct sockaddr *) &client_addr, (u32_t *) &lAddrLen);

			if (lClientFd > 0L) {
				send(lClientFd, pcWelcomeMessage, strlen((const char *) pcWelcomeMessage), 0);

				lInputIndex = 0;
				memset(cInputString, 0x00, cmdMAX_INPUT_SIZE);

				do {
					lBytes = recv(lClientFd, &cInChar, sizeof(cInChar), 0);

					if (lBytes > 0L) {
						if (cInChar == '\n') {
							/* The input string has been terminated.  Was the
							 input a quit command? */
							if (strcmp("quit", (const char *) cInputString) == 0) {
								/* Set lBytes to 0 to close the connection. */
								lBytes = 0L;
							} else {
								/* The input string was not a quit command.
								 Pass the string to the command interpreter. */
								do {
									/* Get the next output string from the command interpreter. */
									xReturned = FreeRTOS_CLIProcessCommand(cInputString, cOutputString,
									cmdMAX_INPUT_SIZE);
									send(lClientFd, cOutputString, strlen((const char *) cOutputString), 0);

								} while (xReturned != pdFALSE);

								/* All the strings generated by the input
								 command have been sent.  Clear the input
								 string ready to receive the next command. */
								lInputIndex = 0;
								memset(cInputString, 0x00, cmdMAX_INPUT_SIZE);
								send(lClientFd, "\r\n>", strlen("\r\n>"), 0);
							}
						} else {
							if (cInChar == '\r') {
								/* Ignore the character. */
							} else if (cInChar == '\b') {
								/* Backspace was pressed.  Erase the last
								 character in the string - if any. */
								if (lInputIndex > 0) {
									lInputIndex--;
									cInputString[lInputIndex] = '\0';
								}
							} else {
								/* A character was entered.  Add it to the string
								 entered so far.  When a \n is entered the complete
								 string will be passed to the command interpreter. */
								if (lInputIndex < cmdMAX_INPUT_SIZE) {
									cInputString[lInputIndex] = cInChar;
									lInputIndex++;
								}
							}
						}
					}

				} while (lBytes > 0L);

				close(lClientFd);
			}
		}
	}

	/* Will only get here if a listening socket could not be created. */
	vTaskDelete( NULL);
}

